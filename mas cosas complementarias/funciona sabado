from flask import Flask, request, redirect, url_for, render_template, flash
from sqlalchemy import func
from model.model import Database, Perfil, Puesto, CuestionarioJung, CategoriaJung

app = Flask(__name__)
app.secret_key = 'tu_llave_secreta'

# Configuramos la sesión de SQLAlchemy utilizando la clase Database Singleton
session_db = Database.get_instance().get_session()

@app.route('/')
def index():
    return redirect(url_for('registrar_perfil'))

@app.route('/registrar_perfil', methods=['GET', 'POST'])
def registrar_perfil():
    if request.method == 'POST':
        nombre = request.form.get('nombre')
        apellido_paterno = request.form.get('apellido_paterno')
        apellido_materno = request.form.get('apellido_materno')
        telefono = request.form.get('telefono')
        correo = request.form.get('correo')
        id_puesto = request.form.get('id_puesto')

        if nombre and apellido_paterno and apellido_materno and telefono and correo and id_puesto:
            try:
                id_puesto = int(id_puesto)
                nuevo_perfil = Perfil(
                    nombre=nombre,
                    apellidoPaterno=apellido_paterno,
                    apellidoMaterno=apellido_materno,
                    telefono=telefono,
                    correo_electronico=correo,
                    id_puesto=id_puesto
                )
                session_db.add(nuevo_perfil)
                session_db.commit()
                flash('Perfil registrado correctamente', 'success')
                return redirect(url_for('menu_cuestionario', id_perfil=nuevo_perfil.id_perfil))
            except ValueError:
                flash('ID de puesto no válido.', 'danger')
        else:
            flash('Todos los campos son obligatorios.', 'danger')

    puestos = session_db.query(Puesto).all()
    return render_template('registrar_perfil.html', puestos=puestos)

@app.route('/menu_cuestionario/<int:id_perfil>')
def menu_cuestionario(id_perfil):
    perfil = obtener_perfil(id_perfil)
    return render_template('menu_cuestionario.html', perfil=perfil)

@app.route('/menu_secciones')
def menu_secciones():
    return render_template('menu_secciones.html')

def obtener_perfil(id_perfil=None):
    if id_perfil is not None:
        return session_db.query(Perfil).filter_by(id_perfil=id_perfil).first()
    max_id_perfil = session_db.query(func.max(Perfil.id_perfil)).scalar()
    return session_db.query(Perfil).filter_by(id_perfil=max_id_perfil).first() if max_id_perfil else None

def obtener_puesto(id_puesto=None):
    if id_puesto is not None:
        return session_db.query(Puesto).filter_by(id_puesto=id_puesto).first()
    max_id_puesto = session_db.query(func.max(Puesto.id_puesto)).scalar()
    return session_db.query(Puesto).filter_by(id_puesto=max_id_puesto).first() if max_id_puesto else None

def guardar_cuestionario(seccion_sumas, id_perfil, id_puesto):
    cuestionarios = [
        CuestionarioJung(id_perfil=id_perfil, id_puesto=id_puesto, seccion=f"Sección {i+1}", puntos=seccion_sumas[i])
        for i in range(len(seccion_sumas))
    ]
    session_db.add_all(cuestionarios)
    session_db.commit()

@app.route('/Seccion1_2')
def seccion_1_2():
    perfil = obtener_perfil()
    puesto = obtener_puesto()
    return render_template('seccion1_2.html', perfil=perfil, puesto=puesto)

@app.route('/sumar_secciones', methods=['POST'])
def sumar_secciones():
    try:
        seccion1_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(1, 10)])
        seccion2_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(10, 19)])
        id_perfil = int(request.form.get('id_perfil'))
        id_puesto = int(request.form.get('id_puesto'))
        guardar_cuestionario([seccion1_suma, seccion2_suma], id_perfil, id_puesto)
        return redirect(url_for('seccion_3_4'))
    except ValueError:
        flash("ID de perfil o puesto no son valores enteros.", 'danger')
    return redirect(url_for('seccion_1_2'))

@app.route('/Seccion3_4')
def seccion_3_4():
    perfil = obtener_perfil()
    puesto = obtener_puesto()
    return render_template('seccion3_4.html', perfil=perfil, puesto=puesto)

@app.route('/sumar_secciones3_4', methods=['POST'])
def sumar_secciones3_4():
    try:
        seccion3_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(1, 10)])
        seccion4_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(10, 19)])
        id_perfil = int(request.form.get('id_perfil'))
        id_puesto = int(request.form.get('id_puesto'))
        guardar_cuestionario([seccion3_suma, seccion4_suma], id_perfil, id_puesto)
        return redirect(url_for('seccion_5_6'))
    except ValueError:
        flash("ID de perfil o puesto no son valores enteros.", 'danger')
    return redirect(url_for('seccion_3_4'))

@app.route('/Seccion5_6')
def seccion_5_6():
    perfil = obtener_perfil()
    puesto = obtener_puesto()
    return render_template('seccion5_6.html', perfil=perfil, puesto=puesto)

@app.route('/sumar_secciones5_6', methods=['POST'])
def sumar_secciones5_6():
    try:
        seccion5_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(37, 46)])
        seccion6_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(46, 55)])
        id_perfil = int(request.form.get('id_perfil'))
        id_puesto = int(request.form.get('id_puesto'))
        guardar_cuestionario([seccion5_suma, seccion6_suma], id_perfil, id_puesto)
        return redirect(url_for('seccion_7_8'))
    except ValueError:
        flash("ID de perfil o puesto no son valores enteros.", 'danger')
    return redirect(url_for('seccion_5_6'))

@app.route('/Seccion7_8')
def seccion_7_8():
    perfil = obtener_perfil()
    puesto = obtener_puesto()
    return render_template('seccion7_8.html', perfil=perfil, puesto=puesto)

@app.route('/sumar_secciones7_8', methods=['POST'])
def sumar_secciones7_8():
    try:
        seccion7_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(55, 64)])
        seccion8_suma = sum([int(request.form.get(f'pregunta{i}', 0)) for i in range(64, 73)])
        id_perfil = int(request.form.get('id_perfil'))
        id_puesto = int(request.form.get('id_puesto'))
        guardar_cuestionario([seccion7_suma, seccion8_suma], id_perfil, id_puesto)
        return redirect(url_for('resultados_perfil', id_perfil=id_perfil))
    except ValueError:
        flash("ID de perfil o puesto no son valores enteros.", 'danger')
    return redirect(url_for('seccion_7_8'))

@app.route('/resultados')
def resultados():
    perfiles = session_db.query(Perfil).all()
    resultados = []

    for perfil in perfiles:
        cuestionarios = session_db.query(CuestionarioJung).filter_by(id_perfil=perfil.id_perfil).all()
        total_puntos = sum(cuestionario.puntos for cuestionario in cuestionarios)
        resultados.append({
            'perfil': perfil,
            'total_puntos': total_puntos,
            'cuestionarios': cuestionarios
        })
    
    return render_template('resultados.html', resultados=resultados)

@app.route('/resultados_perfil/<int:id_perfil>')
def resultados_perfil(id_perfil):
    perfil = obtener_perfil(id_perfil)
    cuestionarios = session_db.query(CuestionarioJung).filter_by(id_perfil=id_perfil).all()
    total_puntos = sum(cuestionario.puntos for cuestionario in cuestionarios)
    
    secciones = {f'Sección {i}': 0 for i in range(1, 9)}
    for cuestionario in cuestionarios:
        if cuestionario.seccion in secciones:
            secciones[cuestionario.seccion] = cuestionario.puntos

    comparaciones = {
        '1_2': 'Sección 1' if secciones['Sección 1'] > secciones['Sección 2'] else 'Sección 2',
        '3_4': 'Sección 3' if secciones['Sección 3'] > secciones['Sección 4'] else 'Sección 4',
        '5_6': 'Sección 5' if secciones['Sección 5'] > secciones['Sección 6'] else 'Sección 6',
        '7_8': 'Sección 7' if secciones['Sección 7'] > secciones['Sección 8'] else 'Sección 8'
    }

    categoria = determinar_categoria(comparaciones)

    resultado = {
        'perfil': perfil,
        'total_puntos': total_puntos,
        'cuestionarios': cuestionarios,
        'comparaciones': comparaciones,
        'categoria': categoria
    }

    return render_template('resultados_perfil.html', resultado=resultado)

def determinar_categoria(comparaciones):
    combinaciones = {
        ('Sección 3', 'Sección 5'): 'tecnico analitico',
        ('Sección 3', 'Sección 6'): 'apoyo',
        ('Sección 4', 'Sección 5'): 'controlador',
        ('Sección 4', 'Sección 3'): 'social',
        ('Sección 5', 'Sección 3'): 'tecnico analitico',
        ('Sección 5', 'Sección 4'): 'controlador',
        ('Sección 6', 'Sección 3'): 'apoyo',
        ('Sección 6', 'Sección 4'): 'social',
    }

    seccion_34 = comparaciones['3_4']
    seccion_56 = comparaciones['5_6']

    return combinaciones.get((seccion_34, seccion_56), 'Sin categoría definida')

if __name__ == '__main__':
    app.run(debug=True)
